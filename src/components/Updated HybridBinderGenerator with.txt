// Updated HybridBinderGenerator with enhanced PDF functionality
// File: src/components/HybridBinderGenerator.js

import React, { useState, useEffect } from 'react';
import { Globe, FileText, RefreshCw, CheckCircle, AlertTriangle, Download } from 'lucide-react';

const HybridBinderGenerator = ({ project, onProjectUpdate }) => {
  const [mode, setMode] = useState('pdf'); // Default to PDF mode
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [generatedWeb, setGeneratedWeb] = useState(false);
  const [generatedPDF, setGeneratedPDF] = useState(null);
  const [documents, setDocuments] = useState([]);
  const [structure, setStructure] = useState({ sections: [], documents: [] });

  useEffect(() => {
    if (project?.id) {
      loadDocuments();
    }
  }, [project?.id]);

  const loadDocuments = async () => {
    if (!project?.id) return;
    
    setLoading(true);
    try {
      const { supabase } = await import('../lib/supabase');
      
      // Load documents
      const { data: docsData, error: docsError } = await supabase
        .from('documents')
        .select('*')
        .eq('project_id', project.id)
        .order('created_at', { ascending: true });

      if (docsError) throw docsError;

      // Load structure
      const { data: structureData, error: structureError } = await supabase
        .from('sections')
        .select('*')
        .eq('project_id', project.id)
        .order('section_order', { ascending: true });

      if (structureError) throw structureError;

      setDocuments(docsData || []);
      setStructure({
        sections: structureData || [],
        documents: docsData || []
      });

    } catch (err) {
      console.error('Error loading documents:', err);
      setError(`Failed to load documents: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateWeb = async () => {
    if (documents.length === 0) {
      setError('No documents found. Please upload documents first.');
      return;
    }
    
    setGeneratedWeb(true);
    setError(null);
  };

  const handleGeneratePDF = async () => {
    console.log('Starting enhanced PDF generation...');
    setLoading(true);
    setError(null);
    setGeneratedPDF(null);
    
    try {
      if (documents.length === 0) {
        throw new Error('No documents found. Please upload documents first.');
      }

      // Import the enhanced PDF generator
      const { generateEnhancedPDFBinder } = await import('../utils/enhancedPdfBinderGenerator');
      
      // Load logos for PDF generation
      const { supabase } = await import('../lib/supabase');
      const { data: logosData, error: logosError } = await supabase
        .from('logos')
        .select('*')
        .eq('project_id', project.id)
        .order('logo_position');

      if (logosError) {
        console.error('Error loading logos for PDF:', logosError);
      }

      console.log('Generating enhanced PDF with data:', {
        project: project?.title,
        documents: documents.length,
        sections: structure.sections.length,
        logos: logosData?.length || 0
      });

      // Generate the enhanced PDF binder
      const result = await generateEnhancedPDFBinder({
        project,
        documents,
        structure,
        logos: logosData || []
      });

      if (!result.success) {
        throw new Error(result.error);
      }

      // Create download
      const blob = new Blob([result.data], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = `${project?.title || 'Closing Binder'}.pdf`;
      document.body.appendChild(link);
      link.click();
      
      // Cleanup
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      setGeneratedPDF({
        fileName: `${project?.title || 'Closing Binder'}.pdf`,
        size: result.data.byteLength,
        bookmarks: result.bookmarks || new Map()
      });
      
      console.log('Enhanced PDF generated and downloaded successfully');

    } catch (err) {
      console.error('Error generating enhanced PDF:', err);
      setError(`Failed to generate PDF: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const ModeSelector = () => (
    <div className="flex items-center space-x-4 mb-6">
      <button
        onClick={() => setMode('web')}
        className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
          mode === 'web'
            ? 'bg-black text-white'
            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
        }`}
      >
        <Globe className="h-4 w-4 mr-2" />
        Web Binder
      </button>
      <button
        onClick={() => setMode('pdf')}
        className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
          mode === 'pdf'
            ? 'bg-black text-white'
            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
        }`}
      >
        <FileText className="h-4 w-4 mr-2" />
        PDF Binder
      </button>
      <button
        onClick={loadDocuments}
        disabled={loading}
        className="flex items-center px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50"
      >
        <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
        Refresh
      </button>
    </div>
  );

  const DocumentStats = () => (
    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
      <h4 className="font-medium text-blue-900 mb-2">Project Status</h4>
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
        <div className="text-blue-800">
          <span className="font-medium">{documents.length}</span> Documents
        </div>
        <div className="text-blue-800">
          <span className="font-medium">{structure.sections.filter(s => s.section_type === 'section').length}</span> Sections
        </div>
        <div className="text-blue-800">
          <span className="font-medium">{structure.sections.filter(s => s.section_type === 'subsection').length}</span> Subsections
        </div>
        <div className="text-blue-800">
          <span className="font-medium">{documents.filter(d => d.section_id).length}</span> Organized
        </div>
      </div>
    </div>
  );

  const WebBinderContent = () => {
    if (!generatedWeb) {
      return (
        <div className="text-center py-12">
          <Globe className="h-16 w-16 mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            Generate Web-Based Binder
          </h3>
          <p className="text-gray-600 mb-6">
            Create an interactive HTML binder with clickable links to cloud-hosted documents
          </p>
          
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 max-w-md mx-auto">
              <p className="text-red-800 text-sm">{error}</p>
            </div>
          )}

          <button
            onClick={handleGenerateWeb}
            disabled={loading || documents.length === 0}
            className="inline-flex items-center px-6 py-3 bg-black text-white rounded-lg hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                Generating Web Binder...
              </>
            ) : (
              <>
                <Globe className="h-5 w-5 mr-2" />
                Generate Web Binder
              </>
            )}
          </button>

          {loading && (
            <div className="mt-4 text-sm text-gray-600">
              <p>Creating interactive web-based binder...</p>
            </div>
          )}
        </div>
      );
    }

    return (
      <div className="text-center py-8">
        <div className="flex items-center justify-center mb-4">
          <CheckCircle className="h-8 w-8 text-green-500 mr-2" />
          <h3 className="text-lg font-medium text-gray-900">Web Binder Generated Successfully!</h3>
        </div>

        <div className="bg-green-50 border border-green-200 rounded-lg p-4 max-w-md mx-auto">
          <h4 className="font-medium text-green-900 mb-2">✓ Web Binder Generated</h4>
          <ul className="text-sm text-green-800 space-y-1">
            <li>• Professional cover page with property details</li>
            <li>• Interactive table of contents with document links</li>
            <li>• Documents open in new tabs for easy viewing</li>
            <li>• Print-ready format for physical binders</li>
          </ul>
          <button
            onClick={() => setGeneratedWeb(false)}
            className="mt-3 text-sm text-green-700 hover:text-green-900 underline"
          >
            ← Back to generate options
          </button>
        </div>
      </div>
    );
  };

  const PdfBinderContent = () => {
    if (generatedPDF) {
      return (
        <div className="text-center py-8">
          <div className="flex items-center justify-center mb-4">
            <CheckCircle className="h-8 w-8 text-green-500 mr-2" />
            <h3 className="text-lg font-medium text-gray-900">PDF Binder Generated Successfully!</h3>
          </div>

          <div className="bg-green-50 border border-green-200 rounded-lg p-6 max-w-lg mx-auto">
            <h4 className="font-medium text-green-900 mb-3">✓ Enhanced PDF Binder Created</h4>
            
            <div className="text-sm text-green-800 space-y-2 mb-4">
              <div className="flex items-center justify-between">
                <span>File Name:</span>
                <span className="font-medium">{generatedPDF.fileName}</span>
              </div>
              <div className="flex items-center justify-between">
                <span>File Size:</span>
                <span className="font-medium">{(generatedPDF.size / 1024 / 1024).toFixed(2)} MB</span>
              </div>
              <div className="flex items-center justify-between">
                <span>Documents:</span>
                <span className="font-medium">{generatedPDF.bookmarks.size}</span>
              </div>
            </div>
            
            <div className="border-t border-green-200 pt-3">
              <h5 className="font-medium text-green-900 mb-2">Enhanced Features:</h5>
              <ul className="text-sm text-green-700 space-y-1">
                <li>• Professional cover page with logos and property photos</li>
                <li>• Enhanced table of contents with clickable document links</li>
                <li>• Links open documents in new browser windows</li>
                <li>• "Back to TOC" navigation buttons on each document</li>
                <li>• Professional formatting for legal/financial industry</li>
                <li>• Proper hierarchical numbering and organization</li>
              </ul>
            </div>
            
            <div className="flex gap-2 mt-4">
              <button
                onClick={() => setGeneratedPDF(null)}
                className="flex-1 text-sm text-green-700 hover:text-green-900 underline"
              >
                ← Generate Another PDF
              </button>
            </div>
          </div>
        </div>
      );
    }

    return (
      <div className="text-center py-12">
        <FileText className="h-16 w-16 mx-auto text-gray-400 mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Generate Enhanced PDF Binder
        </h3>
        <p className="text-gray-600 mb-6">
          Create a professional PDF with enhanced table of contents, clickable links, and improved formatting
        </p>
        
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 max-w-md mx-auto">
            <div className="flex items-start">
              <AlertTriangle className="h-5 w-5 text-red-600 mr-2 mt-0.5 flex-shrink-0" />
              <p className="text-red-800 text-sm text-left">{error}</p>
            </div>
          </div>
        )}
        
        <div className="mb-6">
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-lg mx-auto">
            <h4 className="font-medium text-blue-900 mb-2">Enhanced PDF Features</h4>
            <ul className="text-sm text-blue-800 space-y-1 text-left">
              <li>• Professional cover page with property photos and logos</li>
              <li>• Enhanced table of contents with better formatting</li>
              <li>• Clickable document links that open in new windows</li>
              <li>• "Back to TOC" navigation buttons</li>
              <li>• Legal/financial industry standard formatting</li>
              <li>• Proper hierarchical document organization</li>
            </ul>
          </div>
        </div>
        
        <button
          onClick={handleGeneratePDF}
          disabled={loading || documents.length === 0}
          className="inline-flex items-center px-6 py-3 bg-black text-white rounded-lg hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {loading ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
              Generating Enhanced PDF...
            </>
          ) : (
            <>
              <Download className="h-5 w-5 mr-2" />
              Generate Enhanced PDF Binder
            </>
          )}
        </button>

        {loading && (
          <div className="mt-4 text-sm text-gray-600">
            <p>Creating enhanced PDF with improved formatting...</p>
            <p>This may take a few minutes for large binders...</p>
            <p>Please keep this tab open during generation.</p>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h2 className="text-xl font-semibold text-gray-900">Generate Closing Binder</h2>
        <p className="text-sm text-gray-600 mt-1">
          Choose between interactive web format or enhanced PDF with improved table of contents
        </p>
      </div>

      <ModeSelector />
      <DocumentStats />

      {/* Content based on mode */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        {mode === 'web' ? <WebBinderContent /> : <PdfBinderContent />}
      </div>
    </div>
  );
};

export default HybridBinderGenerator;